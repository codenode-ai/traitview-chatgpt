-- ===========================================
-- RESET (opcional, cuidado!)
-- ===========================================
drop schema if exists public cascade;
create schema public;

-- ===========================================
-- EXTENSIONS necessárias
-- ===========================================
create extension if not exists "uuid-ossp";
create extension if not exists "pgcrypto";

-- ===========================================
-- ORGANIZAÇÕES
-- ===========================================
create table organizations (
    id uuid primary key default uuid_generate_v4(),
    name text not null,
    created_at timestamp with time zone default now()
);

-- ===========================================
-- PERFIS (usuários vinculados ao auth.users)
-- ===========================================
create table profiles (
    id uuid primary key, -- mesmo que auth.users.id
    org_id uuid references organizations(id) on delete set null,
    full_name text,
    role text check (role in ('admin','user')) default 'user',
    created_at timestamp with time zone default now()
);

-- ===========================================
-- TESTES (templates de avaliação)
-- ===========================================
create table tests (
    id uuid primary key default uuid_generate_v4(),
    org_id uuid references organizations(id) on delete cascade,
    name text not null,
    description text,
    created_at timestamp with time zone default now()
);

-- ===========================================
-- QUESTÕES (ligadas a um teste)
-- ===========================================
create table questions (
    id uuid primary key default uuid_generate_v4(),
    test_id uuid references tests(id) on delete cascade,
    text text not null,
    dimension text not null, -- ex: DISC, Big Five, etc
    created_at timestamp with time zone default now()
);

-- ===========================================
-- AVALIAÇÕES (uma aplicação de teste a um candidato)
-- ===========================================
create table evaluations (
    id uuid primary key default uuid_generate_v4(),
    org_id uuid references organizations(id) on delete cascade,
    test_id uuid references tests(id) on delete cascade,
    candidate_name text not null,
    candidate_email text,
    status text check (status in ('pending','completed')) default 'pending',
    created_at timestamp with time zone default now()
);

-- ===========================================
-- RESPOSTAS (cada questão respondida em uma avaliação)
-- ===========================================
create table answers (
    id uuid primary key default uuid_generate_v4(),
    evaluation_id uuid references evaluations(id) on delete cascade,
    question_id uuid references questions(id) on delete cascade,
    value int not null check (value between 1 and 5),
    created_at timestamp with time zone default now()
);

-- ===========================================
-- RELATÓRIOS (resultado consolidado da avaliação)
-- ===========================================
create table reports (
    id uuid primary key default uuid_generate_v4(),
    evaluation_id uuid references evaluations(id) on delete cascade,
    summary text,
    pdf_url text, -- link pro PDF exportado
    created_at timestamp with time zone default now()
);



-- ===========================================
-- Habilitar RLS em todas as tabelas
-- (roda tranquilo mesmo se já estiver habilitado)
-- ===========================================
alter table organizations enable row level security;
alter table profiles     enable row level security;
alter table tests        enable row level security;
alter table questions    enable row level security;
alter table evaluations  enable row level security;
alter table answers      enable row level security;
alter table reports      enable row level security;

-- ===========================================
-- Helpers
-- ===========================================
-- org atual do usuário autenticado (pega do profiles)
create or replace function current_org() returns uuid
language sql stable as $$
  select org_id from profiles where id = auth.uid()
$$;

-- checa se o usuário é admin
create or replace function is_admin() returns boolean
language sql stable as $$
  select coalesce((select role = 'admin' from profiles where id = auth.uid()), false)
$$;

-- ===========================================
-- PROFILES
-- cada usuário só lê/edita o próprio perfil
-- ===========================================
drop policy if exists profiles_self_select on profiles;
drop policy if exists profiles_self_update on profiles;

create policy profiles_self_select
on profiles
for select
using (id = auth.uid());

create policy profiles_self_update
on profiles
for update
using (id = auth.uid())
with check (id = auth.uid());

-- (Sem policy de INSERT/DELETE aqui: faça criação/remoção de perfil pelo backend/service key)

-- ===========================================
-- ORGANIZATIONS
-- membros leem; apenas admin da própria org pode atualizar
-- ===========================================
drop policy if exists org_member_select on organizations;
drop policy if exists org_admin_update on organizations;

create policy org_member_select
on organizations
for select
using (id = current_org());

create policy org_admin_update
on organizations
for update
using (id = current_org() and is_admin())
with check (id = current_org() and is_admin());

-- ===========================================
-- TESTS
-- membros leem; admin pode criar/editar/apagar dentro da própria org
-- ===========================================
drop policy if exists tests_member_select on tests;
drop policy if exists tests_admin_write  on tests;

create policy tests_member_select
on tests
for select
using (org_id = current_org());

create policy tests_admin_write
on tests
for all
using (org_id = current_org() and is_admin())
with check (org_id = current_org() and is_admin());

-- ===========================================
-- QUESTIONS
-- leitura por membros (via teste); escrita por admin
-- ===========================================
drop policy if exists questions_member_select on questions;
drop policy if exists questions_admin_write  on questions;

create policy questions_member_select
on questions
for select
using (
  exists (
    select 1
    from tests t
    where t.id = questions.test_id
      and t.org_id = current_org()
  )
);

create policy questions_admin_write
on questions
for all
using (
  exists (
    select 1
    from tests t
    where t.id = questions.test_id
      and t.org_id = current_org()
  )
  and is_admin()
)
with check (
  exists (
    select 1
    from tests t
    where t.id = questions.test_id
      and t.org_id = current_org()
  )
  and is_admin()
);

-- ===========================================
-- EVALUATIONS
-- membros leem; admin cria/atualiza/apaga dentro da org
-- ===========================================
drop policy if exists evaluations_member_select on evaluations;
drop policy if exists evaluations_admin_write  on evaluations;

create policy evaluations_member_select
on evaluations
for select
using (org_id = current_org());

create policy evaluations_admin_write
on evaluations
for all
using (org_id = current_org() and is_admin())
with check (org_id = current_org() and is_admin());

-- ===========================================
-- ANSWERS
-- membros leem respostas da sua org; inserção liberada a membros
-- (se quiser formulário público sem login, falo abaixo)
-- ===========================================
drop policy if exists answers_member_select on answers;
drop policy if exists answers_member_insert on answers;

create policy answers_member_select
on answers
for select
using (
  exists (
    select 1
    from evaluations e
    where e.id = answers.evaluation_id
      and e.org_id = current_org()
  )
);

create policy answers_member_insert
on answers
for insert
with check (
  exists (
    select 1
    from evaluations e
    where e.id = answers.evaluation_id
      and e.org_id = current_org()
  )
);

-- (Sem update/delete em answers por padrão. Se precisar, crie policies específicas.)

-- ===========================================
-- REPORTS
-- membros leem; admin escreve
-- ===========================================
drop policy if exists reports_member_select on reports;
drop policy if exists reports_admin_write  on reports;

create policy reports_member_select
on reports
for select
using (
  exists (
    select 1
    from evaluations e
    where e.id = reports.evaluation_id
      and e.org_id = current_org()
  )
);

create policy reports_admin_write
on reports
for all
using (
  exists (
    select 1
    from evaluations e
    where e.id = reports.evaluation_id
      and e.org_id = current_org()
  )
  and is_admin()
)
with check (
  exists (
    select 1
    from evaluations e
    where e.id = reports.evaluation_id
      and e.org_id = current_org()
  )
  and is_admin()
);


-- ============================================================
-- TraitView • SEED DE DADOS PARA TESTE (dev/demo)
-- Requisitos: rodar DEPOIS de criar as tabelas.
-- ============================================================

-- ---------- IDs fixos para facilitar rodadas repetidas ----------
-- Org + Tests + Evaluations com UUIDs estáveis
-- (assim dá para rodar mais de uma vez sem duplicar muito)
-- OBS: O "profiles" pega dinamicamente o último usuário do Auth (se existir)

-- ---------------------------------------------------------------
-- 1) Organização Demo
-- ---------------------------------------------------------------
insert into organizations (id, name, created_at)
values ('11111111-1111-1111-1111-111111111111', 'Org Demo', now())
on conflict (id) do nothing;

-- ---------------------------------------------------------------
-- 2) Perfil Admin (amarra ao último usuário do Supabase Auth, se houver)
-- ---------------------------------------------------------------
do $$
declare
  u uuid;
begin
  select id into u from auth.users order by created_at desc limit 1;
  if u is not null then
    insert into profiles (id, org_id, full_name, role, created_at)
    values (u, '11111111-1111-1111-1111-111111111111', 'Admin Demo', 'admin', now())
    on conflict (id) do update set
      org_id = excluded.org_id,
      full_name = excluded.full_name,
      role = excluded.role;
  end if;
end $$;

-- Se você ainda não tem usuário, crie pelo app (/login) e depois rode:
-- update profiles set id = '<SEU_AUTH_UID>', org_id='11111111-1111-1111-1111-111111111111' where id = '<ID_ANTIGO>';

-- ---------------------------------------------------------------
-- 3) TESTES
-- ---------------------------------------------------------------
-- 3.1 DISC Simplificado
insert into tests (id, org_id, name, description, created_at)
values ('33333333-3333-3333-3333-333333333333',
        '11111111-1111-1111-1111-111111111111',
        'DISC Simplificado',
        'Traços dominantes (Likert 1–5)',
        now())
on conflict (id) do nothing;

-- Perguntas do DISC
-- dimension aqui é só um rótulo livre (ex.: D/I/S/C)
insert into questions (id, test_id, text, dimension, created_at) values
  ('aaaaaaa1-aaaa-aaaa-aaaa-aaaaaaaaaaa1','33333333-3333-3333-3333-333333333333','Gosto de assumir o controle em situações desafiadoras.','D',now()),
  ('aaaaaaa2-aaaa-aaaa-aaaa-aaaaaaaaaaa2','33333333-3333-3333-3333-333333333333','Valorizo harmonia e cooperação no time.','I',now()),
  ('aaaaaaa3-aaaa-aaaa-aaaa-aaaaaaaaaaa3','33333333-3333-3333-3333-333333333333','Prefiro seguir processos claros e detalhados.','C',now()),
  ('aaaaaaa4-aaaa-aaaa-aaaa-aaaaaaaaaaa4','33333333-3333-3333-3333-333333333333','Tomo decisões rapidamente com base em resultados.','D',now())
on conflict (id) do nothing;

-- 3.2 Big Five Lite
insert into tests (id, org_id, name, description, created_at)
values ('44444444-4444-4444-4444-444444444444',
        '11111111-1111-1111-1111-111111111111',
        'Big Five Lite',
        'Traços: Abertura, Conscienciosidade, Extroversão, Amabilidade, Neuroticismo',
        now())
on conflict (id) do nothing;

insert into questions (id, test_id, text, dimension, created_at) values
  ('bbbbbbb1-bbbb-bbbb-bbbb-bbbbbbbbbbb1','44444444-4444-4444-4444-444444444444','Gosto de explorar ideias novas e criativas.','Abertura',now()),
  ('bbbbbbb2-bbbb-bbbb-bbbb-bbbbbbbbbbb2','44444444-4444-4444-4444-444444444444','Sou organizado(a) e confiável em prazos.','Conscienciosidade',now()),
  ('bbbbbbb3-bbbb-bbbb-bbbb-bbbbbbbbbbb3','44444444-4444-4444-4444-444444444444','Me sinto energizado(a) em situações sociais.','Extroversão',now()),
  ('bbbbbbb4-bbbb-bbbb-bbbb-bbbbbbbbbbb4','44444444-4444-4444-4444-444444444444','Procuro evitar conflitos e ser colaborativo(a).','Amabilidade',now()),
  ('bbbbbbb5-bbbb-bbbb-bbbb-bbbbbbbbbbb5','44444444-4444-4444-4444-444444444444','Fico ansioso(a) com facilidade sob pressão.','Neuroticismo',now())
on conflict (id) do nothing;

-- ---------------------------------------------------------------
-- 4) AVALIAÇÕES DEMO
-- ---------------------------------------------------------------
-- Avaliação 1 (DISC) para a Candidata Ana
insert into evaluations (id, org_id, test_id, candidate_name, candidate_email, status, created_at)
values ('55555555-5555-5555-5555-555555555555',
        '11111111-1111-1111-1111-111111111111',
        '33333333-3333-3333-3333-333333333333',
        'Ana Lima','ana@empresa.com','completed', now())
on conflict (id) do nothing;

-- Avaliação 2 (Big Five) para o Candidato Bruno
insert into evaluations (id, org_id, test_id, candidate_name, candidate_email, status, created_at)
values ('66666666-6666-6666-6666-666666666666',
        '11111111-1111-1111-1111-111111111111',
        '44444444-4444-4444-4444-444444444444',
        'Bruno Souza','bruno@empresa.com','completed', now())
on conflict (id) do nothing;

-- ---------------------------------------------------------------
-- 5) RESPOSTAS (gera valores 1–5 aleatórios para cada pergunta)
-- ---------------------------------------------------------------

-- DISC -> avaliação 5555...
do $$
declare
  q record;
begin
  for q in
    select id from questions where test_id = '33333333-3333-3333-3333-333333333333'
  loop
    insert into answers (id, evaluation_id, question_id, value, created_at)
    values (gen_random_uuid(), '55555555-5555-5555-5555-555555555555', q.id, (1 + floor(random()*5))::int, now())
    on conflict do nothing;
  end loop;
end $$;

-- Big Five -> avaliação 6666...
do $$
declare
  q record;
begin
  for q in
    select id from questions where test_id = '44444444-4444-4444-4444-444444444444'
  loop
    insert into answers (id, evaluation_id, question_id, value, created_at)
    values (gen_random_uuid(), '66666666-6666-6666-6666-666666666666', q.id, (1 + floor(random()*5))::int, now())
    on conflict do nothing;
  end loop;
end $$;

-- ---------------------------------------------------------------
-- 6) RELATÓRIOS (mock simples)
-- ---------------------------------------------------------------
insert into reports (id, evaluation_id, summary, pdf_url, created_at) values
  (gen_random_uuid(), '55555555-5555-5555-5555-555555555555',
   'Perfil com tendência a Dominância (D) e foco em resultados. Recomenda-se desafio e autonomia.',
   null, now()),
  (gen_random_uuid(), '66666666-6666-6666-6666-666666666666',
   'Perfil equilibrado em Big Five, com leve destaque para Conscienciosidade e Amabilidade.',
   null, now());
